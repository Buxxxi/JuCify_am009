
SINK|<java.lang.ProcessBuilder: java.lang.Process start()>




SINK|<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>

% add Activity.getIntent() as source instead of the next methods to avoid duplicate results.


%bundle sources

%bundle sinks
SINK|<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>
SINK|<android.os.Bundle: void putBoolean(java.lang.String,boolean)>
SINK|<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])>
SINK|<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
SINK|<android.os.Bundle: void putByte(java.lang.String,byte)>
SINK|<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
SINK|<android.os.Bundle: void putChar(java.lang.String,char)>
SINK|<android.os.Bundle: void putCharArray(java.lang.String,char[])>
SINK|<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>
SINK|<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>
SINK|<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>
SINK|<android.os.Bundle: void putDouble(java.lang.String,double)>
SINK|<android.os.Bundle: void putDoubleArray(java.lang.String,double[])>
SINK|<android.os.Bundle: void putFloat(java.lang.String,float)>
SINK|<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
SINK|<android.os.Bundle: void putInt(java.lang.String,int)>
SINK|<android.os.Bundle: void putIntArray(java.lang.String,int[])>
SINK|<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>
SINK|<android.os.Bundle: void putLong(java.lang.String,long)>
SINK|<android.os.Bundle: void putLongArray(java.lang.String,long[])>
SINK|<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
SINK|<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
SINK|<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
SINK|<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
SINK|<android.os.Bundle: void putShort(java.lang.String,short)>
SINK|<android.os.Bundle: void putShortArray(java.lang.String,short[])>
SINK|<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
SINK|<android.os.Bundle: void putString(java.lang.String,java.lang.String)>
SINK|<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>
SINK|<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
SINK|<android.os.Bundle: void putAll(android.os.Bundle)>



SINK|<android.util.Log: int d(java.lang.String,java.lang.String)>
SINK|<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
SINK|<android.util.Log: int e(java.lang.String,java.lang.String)>
SINK|<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
SINK|<android.util.Log: int i(java.lang.String,java.lang.String)>
SINK|<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
SINK|<android.util.Log: int v(java.lang.String,java.lang.String)>
SINK|<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
SINK|<android.util.Log: int w(java.lang.String,java.lang.Throwable)>
SINK|<android.util.Log: int w(java.lang.String,java.lang.String)>
SINK|<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
SINK|<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>
SINK|<android.util.Log: int wtf(java.lang.String,java.lang.String)>
SINK|<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>

SINK|<java.io.OutputStream: void write(byte[])>
SINK|<java.io.OutputStream: void write(byte[],int,int)>
SINK|<java.io.OutputStream: void write(int)>

SINK|<java.io.FileOutputStream: void write(byte[])>
SINK|<java.io.FileOutputStream: void write(byte[],int,int)>
SINK|<java.io.FileOutputStream: void write(int)>

SINK|<java.io.Writer: void write(char[])>
SINK|<java.io.Writer: void write(char[],int,int)>
SINK|<java.io.Writer: void write(int)>
SINK|<java.io.Writer: void write(java.lang.String)>
SINK|<java.io.Writer: void write(java.lang.String,int,int)>
SINK|<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>

SINK|<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>

SINK|<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
SINK|<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>

SINK|<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>
SINK|<android.content.Intent: android.content.Intent setAction(java.lang.String)>
SINK|<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.Class)>
SINK|<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
SINK|<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>


SINK|<android.content.Context: void sendBroadcast(android.content.Intent)>
SINK|<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>
SINK|<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>

SINK|<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>

SINK|<android.media.MediaRecorder: void setVideoSource(int)>
SINK|<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>
SINK|<android.media.MediaRecorder: void start()>

SINK|<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
SINK|<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>

SINK|<android.content.IntentFilter: void addAction(java.lang.String)>
SINK|<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
SINK|<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
SINK|<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
SINK|<java.net.Socket: void connect(java.net.SocketAddress)>
SINK|<android.os.Handler: boolean sendMessage(android.os.Message)>

SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>
SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>
SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>
SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>
SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>

SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>
SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>
SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>
SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>
SINK|<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>




SINK|<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
SINK|<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>


SINK|<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
SINK|<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>
SINK|<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>
SINK|<java.net.URL: void <init>(java.lang.String)>
SINK|<java.net.URL: void <init>(java.net.URL,java.lang.String)>
SINK|<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>

SINK|<android.content.Context: void startActivity(android.content.Intent)>
SINK|<android.content.ContextWrapper: void startActivity(android.content.Intent)>
SINK|<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)>
SINK|<android.content.Context: void startActivities(android.content.Intent[])>
SINK|<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>
SINK|<android.content.Context: android.content.ComponentName startService(android.content.Intent)>
SINK|<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
SINK|<android.content.Context: void sendBroadcast(android.content.Intent)>
SINK|<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>


SINK|<android.app.Activity: void setResult(int,android.content.Intent)>

% Do not enter this method as a source. Our callback parameter handling will take care
% of the parameters of this method anyway. Adding this method taints the whole activity!

SINK|<android.app.Activity: void startActivity(android.content.Intent)>
SINK|<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)>
SINK|<android.app.Activity: void startActivities(android.content.Intent[])>
SINK|<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>
SINK|<android.app.Activity: void startActivityForResult(android.content.Intent,int)>
SINK|<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
SINK|<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>
SINK|<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>
SINK|<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>
SINK|<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>
SINK|<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>
SINK|<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int)>
SINK|<android.app.Activity: android.content.ComponentName startService(android.content.Intent)>
SINK|<android.app.Activity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
SINK|<android.app.Activity: void sendBroadcast(android.content.Intent)>
SINK|<android.app.Activity: void sendBroadcast(android.content.Intent,java.lang.String)>
SINK|<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
SINK|<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>
SINK|<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
SINK|<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
SINK|<android.app.Activity: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
SINK|<android.app.Activity: void sendStickyBroadcast(android.content.Intent)>
SINK|<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
SINK|<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
SINK|<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>

SINK|<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
SINK|<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
SINK|<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
SINK|<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SINK|<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>




SOURCE|<android.os.Handler: android.os.Message obtainMessage()>
SOURCE|<android.os.Handler: android.os.Message obtainMessage(int,int,int)>
SOURCE|<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
SOURCE|<android.os.Handler: android.os.Message obtainMessage(int)>
SOURCE|<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>

SOURCE|<java.util.Locale: java.lang.String getCountry()>
SOURCE|<android.telephony.gsm.GsmCellLocation: int getCid()>
SOURCE|<android.telephony.gsm.GsmCellLocation: int getLac()>
SOURCE|<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
SOURCE|<java.util.Calendar: java.util.TimeZone getTimeZone()>
SOURCE|<android.provider.Browser: android.database.Cursor getAllBookmarks()>
SOURCE|<android.provider.Browser: android.database.Cursor getAllVisitedUrls()>


SOURCE|<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SOURCE|<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>


SOURCE|<android.app.Activity: android.content.Intent getIntent()>


SOURCE|<android.database.Cursor: java.lang.String getString(int)>
SOURCE|<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SOURCE|<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>


% SharedPreferences
SOURCE|<android.content.SharedPreferences: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>

SOURCE|<com.android.contacts.test.InjectedServices: android.content.SharedPreferences getSharedPreferences()>
SOURCE|<android.app.SharedPreferencesImpl: java.util.Set getStringSet(java.lang.String,java.util.Set)>
SOURCE|<com.android.camera.CameraPreference: android.content.SharedPreferences getSharedPreferences()>
SOURCE|<android.app.SharedPreferencesImpl: int getInt(java.lang.String,int)>
SOURCE|<com.android.deskclock.timer.TimerFragment: com.android.deskclock.timer.TimerFragment$TimersListAdapter createAdapter(android.content.Context,android.content.SharedPreferences)>
SOURCE|<com.android.inputmethod.latin.UserHistoryDictionary: com.android.inputmethod.latin.UserHistoryDictionary getInstance(android.content.Context,java.lang.String,android.content.SharedPreferences)>
SOURCE|<com.android.phone.sip.SipSharedPreferences: java.lang.String getSipCallOption()>
SOURCE|<com.android.launcher2.LauncherApplication: java.lang.String getSharedPreferencesKey()>
SOURCE|<com.android.email.Preferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)>
SOURCE|<com.android.contacts.list.ContactListFilter: com.android.contacts.list.ContactListFilter restoreDefaultPreferences(android.content.SharedPreferences)>
SOURCE|<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
SOURCE|<com.android.contacts.ContactsActivity: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
SOURCE|<com.android.camera.ComboPreferences: android.content.SharedPreferences getGlobal()>
SOURCE|<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
SOURCE|<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()>
SOURCE|<com.android.mms.util.DownloadManager: boolean getAutoDownloadState(android.content.SharedPreferences)>
SOURCE|<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>
SOURCE|<com.android.calendar.CalendarUtils: android.content.SharedPreferences getSharedPreferences(android.content.Context,java.lang.String)>
SOURCE|<android.test.mock.MockContext: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
SOURCE|<android.app.SharedPreferencesImpl: java.lang.String getString(java.lang.String,java.lang.String)>
SOURCE|<android.preference.PreferenceManager: int getSharedPreferencesMode()>
SOURCE|<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()>
SOURCE|<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>
SOURCE|<com.android.camera.ComboPreferences: android.content.SharedPreferences getLocal()>
SOURCE|<com.android.inputmethod.latin.SettingsValues: java.lang.String getPrefAdditionalSubtypes(android.content.SharedPreferences,android.content.res.Resources)>
SOURCE|<com.android.calendar.alerts.AlertUtils: android.content.SharedPreferences getFiredAlertsTable(android.content.Context)>
SOURCE|<com.android.contacts.ContactsApplication: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
SOURCE|<android.app.SharedPreferencesImpl: long getLong(java.lang.String,long)>
SOURCE|<com.android.browser.BrowserSettings: android.content.SharedPreferences getPreferences()>
SOURCE|<android.preference.Preference: android.content.SharedPreferences$Editor getEditor()>
SOURCE|<android.app.SharedPreferencesImpl: float getFloat(java.lang.String,float)>
SOURCE|<android.app.Activity: android.content.SharedPreferences getPreferences(int)>
SOURCE|<com.android.phone.sip.SipSharedPreferences: java.lang.String getPrimaryAccount()>
SOURCE|<android.preference.PreferenceManager: android.content.SharedPreferences$Editor getEditor()>
SOURCE|<com.android.phone.sip.SipSharedPreferences: int getProfilesCount()>
SOURCE|<com.android.browser.widget.BookmarkThumbnailWidgetService: android.content.SharedPreferences getWidgetState(android.content.Context,int)>
SOURCE|<android.app.SharedPreferencesImpl: java.util.Map getAll()>
SOURCE|<com.android.calendar.GeneralPreferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)>


% SmsManager
SOURCE|<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()>
SOURCE|<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()>
SOURCE|<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
SOURCE|<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>
SOURCE|<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
SOURCE|<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>


SINK|<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
SINK|<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
SINK|<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>


% gsm
SOURCE|<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.Object[] getValues()>
SOURCE|<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()>
SOURCE|<com.android.internal.telephony.gsm.SmsCbHeader: int getDataCodingScheme()>
SOURCE|<com.android.internal.telephony.IccRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
SOURCE|<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: int getGSMIndex()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
SOURCE|<android.telephony.gsm.GsmCellLocation: int getCid()>
SOURCE|<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()>
SOURCE|<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.gsm.SimSmsInterfaceManager)>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getRingingCall()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()>
SOURCE|<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>
SOURCE|<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.util.List getPendingMmiCodes()>
SOURCE|<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()>
SOURCE|<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()>
SOURCE|<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Phone getPhone()>
SOURCE|<com.android.email.activity.UIControllerOnePane: long getMailboxSettingsMailboxId()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)>
SOURCE|<com.android.email.activity.UIControllerSearchTwoPane: long getMailboxSettingsMailboxId()>
SOURCE|<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()>
SOURCE|<android.telephony.CellSignalStrengthGsm: int getLevel()>
SOURCE|<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>
SOURCE|<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence getMessage()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: boolean getMute()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()>
SOURCE|<android.telephony.gsm.SmsMessage: java.lang.String getPseudoSubject()>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: long getDisconnectTime()>
SOURCE|<com.android.email.activity.setup.AccountServerBaseFragment: android.os.Bundle getSettingsModeArgs()>
SOURCE|<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call$State getState()>
SOURCE|<android.telephony.gsm.SmsMessage: long getTimestampMillis()>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)>
SOURCE|<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()>
SOURCE|<android.telephony.gsm.SmsMessage: int getIndexOnSim()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()>
SOURCE|<android.telephony.gsm.GsmCellLocation: int getLac()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: int getApnProfileID(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.String getTag()>
SOURCE|<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getCarrierName(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnection: int getProfileId()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>
SOURCE|<android.telephony.gsm.GsmCellLocation: int getPsc()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$State getState()>
SOURCE|<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentGprsState()>
SOURCE|<android.telephony.CellSignalStrengthGsm: int getAsuLevel()>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()>
SOURCE|<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)>
SOURCE|<android.telephony.SignalStrength: int getGsmDbm()>
SOURCE|<com.android.internal.telephony.gsm.SmsCbHeader: int getServiceCategory()>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()>
SOURCE|<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>
SOURCE|<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)>
SOURCE|<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)>
SOURCE|<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)>
SOURCE|<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()>
SOURCE|<android.telephony.gsm.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
SOURCE|<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()>
SOURCE|<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)>
SOURCE|<com.android.internal.telephony.gsm.GsmServiceStateTracker: com.android.internal.telephony.Phone getPhone()>
SOURCE|<android.telephony.gsm.SmsMessage: java.lang.String getServiceCenterAddress()>
SOURCE|<com.android.internal.telephony.gsm.SmsCbHeader: int getSerialNumber()>
SOURCE|<com.android.internal.telephony.gsm.GsmSmsCbMessage: android.telephony.SmsCbMessage createSmsCbMessage(android.telephony.SmsCbLocation,byte[][])>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()>
SOURCE|<android.telephony.SignalStrength: int getGsmLevel()>
SOURCE|<com.android.internal.telephony.gsm.SmsCbHeader: int getGeographicalScope()>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: long getHoldDurationMillis()>
SOURCE|<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>
SOURCE|<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbEtwsInfo getEtwsInfo()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()>
SOURCE|<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()>
SOURCE|<com.android.internal.telephony.gsm.SmsCbHeader: int getNumberOfPages()>
SOURCE|<android.telephony.CellIdentityGsm: int getMnc()>
SOURCE|<android.telephony.CellIdentityGsm: int getMcc()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()>
SOURCE|<android.telephony.CellIdentityGsm: android.telephony.CellIdentityGsm copy()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: int getDataCodingScheme()>
SOURCE|<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getClccLines()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()>
SOURCE|<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: long getDurationMillis()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
SOURCE|<android.telephony.CellIdentityGsm: int getPsc()>
SOURCE|<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)>
SOURCE|<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()>
SOURCE|<android.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
SOURCE|<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailTag(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()>
SOURCE|<android.telephony.gsm.SmsMessage: java.lang.String getEmailBody()>
SOURCE|<android.telephony.SignalStrength: int getGsmSignalStrength()>
SOURCE|<com.android.internal.telephony.gsm.SimTlv: int getTag()>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()>
SOURCE|<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()>
SOURCE|<com.android.internal.telephony.gsm.SpnOverride: java.lang.String getSpn(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: int getStatus()>
SOURCE|<android.telephony.SignalStrength: int getGsmAsuLevel()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getBackgroundCall()>
SOURCE|<android.telephony.gsm.SmsMessage: int getStatusOnSim()>
SOURCE|<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
SOURCE|<android.telephony.gsm.SmsMessage: byte[] getUserData()>
SOURCE|<android.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.SmsCbHeader: int getPageIndex()>
SOURCE|<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>
SOURCE|<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage$MessageClass getMessageClass()>
SOURCE|<com.android.internal.telephony.gsm.GsmMmiCode: int getCLIRMode()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()>
SOURCE|<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.ArrayList)>
SOURCE|<android.telephony.CellInfoGsm$1: android.telephony.CellInfoGsm createFromParcel(android.os.Parcel)>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()>
SOURCE|<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>
SOURCE|<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()>
SOURCE|<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()>
SOURCE|<android.telephony.SignalStrength: int getGsmBitErrorRate()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()>
SOURCE|<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbCmasInfo getCmasInfo()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
SOURCE|<com.android.internal.telephony.gsm.GsmMmiCode: com.android.internal.telephony.MmiCode$State getState()>
SOURCE|<com.android.internal.telephony.GsmAlphabet$TextEncodingDetails: java.lang.String toString()>
SOURCE|<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[])>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call getCall()>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>
SOURCE|<android.telephony.gsm.SmsMessage: java.lang.String getEmailFrom()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getUserDataSeptetPadding()>
SOURCE|<com.android.internal.telephony.gsm.GsmCallTracker: boolean getMute()>
SOURCE|<android.telephony.gsm.SmsMessage: byte[] getPdu()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)>
SOURCE|<com.android.internal.telephony.gsm.SimTlv: byte[] getData()>
SOURCE|<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()>
SOURCE|<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getForegroundCall()>
SOURCE|<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()>
SOURCE|<android.telephony.gsm.SmsMessage: int getStatus()>
SOURCE|<android.telephony.gsm.SmsMessage: java.lang.String getDisplayMessageBody()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)>
SOURCE|<com.android.email.activity.UIControllerTwoPane: long getMailboxSettingsMailboxId()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int)>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()>
SOURCE|<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getDriverCalls()>
SOURCE|<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.List)>
SOURCE|<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()>
SOURCE|<android.telephony.CellIdentityGsm: int getLac()>
SOURCE|<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()>
SOURCE|<android.telephony.CellIdentityGsm: int getCid()>
SOURCE|<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)>
SOURCE|<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
SOURCE|<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>
SOURCE|<android.telephony.CellSignalStrengthGsm: int getDbm()>
SOURCE|<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()>

% getMeid
SOURCE|<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()>
SOURCE|<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()>
SOURCE|<com.android.internal.telephony.sip.SipPhone: java.lang.String getMeid()>
SOURCE|<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()>


% getImei
SOURCE|<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()>
SOURCE|<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()>
SOURCE|<com.android.internal.telephony.sip.SipPhone: java.lang.String getImei()>
SOURCE|<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()>
SOURCE|<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()>
SOURCE|<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()>


% location.Location
SOURCE|<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
SOURCE|<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>
SOURCE|<android.location.Location: float getSpeed()>
SOURCE|<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
SOURCE|<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()>
SOURCE|<android.location.Location: android.os.Bundle getExtras()>
SOURCE|<android.location.LocationManager: java.util.List getAllProviders()>
SOURCE|<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()>
SOURCE|<com.android.server.location.LocationBasedCountryDetector: java.lang.String getCountryFromLocation(android.location.Location)>
SOURCE|<android.location.Location: float getAccuracy()>
SOURCE|<android.location.Location: double getAltitude()>
SOURCE|<android.location.LocationRequest: float getSmallestDisplacement()>
SOURCE|<com.android.server.location.LocationProviderProxy: com.android.internal.location.ProviderProperties getProperties()>
SOURCE|<android.location.LocationRequest: long getFastestInterval()>
SOURCE|<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
SOURCE|<android.location.Location: double getLongitude()>
SOURCE|<android.location.LocationRequest: long getExpireAt()>
SOURCE|<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
SOURCE|<com.android.server.location.LocationProviderProxy: java.lang.String getName()>
SOURCE|<android.location.Location: double getLatitude()>
SOURCE|<android.location.LocationManager: android.location.Location getLastLocation()>
SOURCE|<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()>
SOURCE|<com.android.server.location.LocationProviderProxy: long getStatusUpdateTime()>
SOURCE|<com.android.server.location.LocationProviderProxy: int getStatus(android.os.Bundle)>
SOURCE|<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
SOURCE|<android.location.Location: float getBearing()>
SOURCE|<android.location.Location: long getElapsedRealtimeNanos()>
SOURCE|<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
SOURCE|<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
SOURCE|<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
SOURCE|<android.location.LocationProvider: int getPowerRequirement()>
SOURCE|<android.location.LocationRequest: int getNumUpdates()>
SOURCE|<android.location.LocationRequest: int getQuality()>
SOURCE|<android.location.LocationRequest: long getInterval()>
SOURCE|<android.location.LocationManager: java.util.List getProviders(boolean)>
SOURCE|<android.location.Location: long getTime()>
SOURCE|<android.location.Location: java.lang.String getProvider()>
SOURCE|<android.location.LocationRequest: java.lang.String getProvider()>
SOURCE|<android.location.LocationProvider: java.lang.String getName()>
SOURCE|<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>
SOURCE|<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()>
SOURCE|<com.android.camera.Storage: android.net.Uri addImage(android.content.ContentResolver,java.lang.String,long,android.location.Location,int,int,java.lang.String,int,int)>
SOURCE|<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
SOURCE|<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>
SOURCE|<android.location.LocationProvider: int getAccuracy()>
SOURCE|<com.android.camera.LocationManager: android.location.Location getCurrentLocation()>
SOURCE|<com.google.android.apps.lightcycle.util.LocationProvider: android.location.Location getCurrentLocation()>

% PackageManager
SOURCE|<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>
SOURCE|<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>
SOURCE|<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
SOURCE|<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
SOURCE|<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
SOURCE|<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>

SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
SOURCE|<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getNativeLibraryPath()>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
SOURCE|<android.test.mock.MockPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
SOURCE|<android.content.pm.ComponentInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>
SOURCE|<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getResourcePath()>
SOURCE|<com.android.server.pm.PackageVerificationState: com.android.server.pm.PackageManagerService$InstallArgs getInstallArgs()>
SOURCE|<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryInstrumentation(java.lang.String,int)>
SOURCE|<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>
SOURCE|<com.android.server.pm.PackageManagerService: java.lang.String getApkName(java.lang.String)>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List getInstalledApplications(int)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List getPreferredPackages(int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)>
SOURCE|<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String)>
SOURCE|<android.content.pm.LabeledIntent: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>
SOURCE|<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>
SOURCE|<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$2300(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>
SOURCE|<com.android.server.pm.PackageManagerService: java.io.File getDataPathForUser(int)>
SOURCE|<android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
SOURCE|<android.app.admin.DeviceAdminInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int,int)>
SOURCE|<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.pm.PackageManager,java.lang.String,java.lang.String)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>
SOURCE|<android.app.admin.DeviceAdminInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
SOURCE|<android.test.mock.MockPackageManager: java.lang.String[] getSystemSharedLibraryNames()>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
SOURCE|<android.app.ApplicationPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
SOURCE|<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>
SOURCE|<android.app.WallpaperInfo: android.graphics.drawable.Drawable loadThumbnail(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)>
SOURCE|<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$3000(com.android.server.pm.PackageManagerService,android.net.Uri,int,java.lang.String,java.lang.String)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>
SOURCE|<android.app.ApplicationPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>
SOURCE|<android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>
SOURCE|<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>
SOURCE|<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryPermissionsByGroup(java.lang.String,int)>
SOURCE|<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
SOURCE|<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>
SOURCE|<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
SOURCE|<android.app.ApplicationPackageManager: int getUidForSharedUser(java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
SOURCE|<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageCleanItem nextPackageToClean(android.content.pm.PackageCleanItem)>
SOURCE|<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getPackageName()>
SOURCE|<android.content.pm.PackageManager: java.lang.String getDataDirForUser(int,java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
SOURCE|<com.android.server.pm.PackageManagerService: java.io.File access$2200(com.android.server.pm.PackageManagerService,java.io.File)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstallerPackageName(java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>
SOURCE|<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
SOURCE|<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
SOURCE|<android.test.mock.MockPackageManager: int getApplicationEnabledSetting(java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List getAllPermissionGroups(int)>
SOURCE|<com.android.server.pm.PackageManagerService: int getInstallLocation()>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)>
SOURCE|<android.test.mock.MockPackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)>
SOURCE|<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean doRename(int,java.lang.String,java.lang.String)>
SOURCE|<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.ApplicationInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
SOURCE|<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)>
SOURCE|<android.content.pm.IPackageManager$Stub: android.os.IBinder asBinder()>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>
SOURCE|<android.test.mock.MockContext: android.content.pm.PackageManager getPackageManager()>
SOURCE|<android.view.inputmethod.InputMethodInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
SOURCE|<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>
SOURCE|<android.app.ApplicationPackageManager: java.lang.String[] getSystemSharedLibraryNames()>
SOURCE|<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
SOURCE|<android.app.admin.DeviceAdminInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
SOURCE|<android.app.WallpaperInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryInstrumentation(java.lang.String,int)>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>
SOURCE|<com.android.providers.applications.ApplicationsProvider: android.content.pm.PackageManager getPackageManager()>
SOURCE|<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
SOURCE|<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>
SOURCE|<android.app.WallpaperInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
SOURCE|<android.app.ApplicationPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>
SOURCE|<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
SOURCE|<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()>
SOURCE|<android.app.ApplicationPackageManager: java.lang.String getNameForUid(int)>
SOURCE|<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getNativeLibraryPath()>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
SOURCE|<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
SOURCE|<android.content.pm.LabeledIntent: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)>
SOURCE|<com.android.server.PackageManagerBackupAgent: com.android.server.PackageManagerBackupAgent$Metadata getRestoredMetadata(java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>
SOURCE|<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()>
SOURCE|<android.app.ApplicationPackageManager: java.lang.String getInstallerPackageName(java.lang.String)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getPreferredPackages(int)>
SOURCE|<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>
SOURCE|<android.app.ContextImpl: android.content.pm.PackageManager getPackageManager()>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryContentProviders(java.lang.String,int,int)>
SOURCE|<android.app.ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)>
SOURCE|<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String)>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>
SOURCE|<android.app.WallpaperInfo: java.lang.CharSequence loadAuthor(android.content.pm.PackageManager)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
SOURCE|<android.app.ApplicationPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
SOURCE|<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context,android.database.Cursor,int,int,java.util.HashMap)>
SOURCE|<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getNameForUid(int)>
SOURCE|<android.test.mock.MockPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)>
SOURCE|<android.app.ApplicationPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
SOURCE|<android.app.WallpaperInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)>
SOURCE|<android.test.mock.MockPackageManager: java.util.List getInstalledPackages(int)>
SOURCE|<android.test.mock.MockPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
SOURCE|<com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)>
SOURCE|<com.android.server.PackageManagerBackupAgent: java.util.Set getRestoredPackages()>
SOURCE|<com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>
SOURCE|<com.android.server.pm.PackageManagerService: java.lang.String[] getSystemSharedLibraryNames()>
SOURCE|<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getPersistentApplications(int)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>
SOURCE|<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle getUser()>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
SOURCE|<com.android.server.pm.PackageManagerService: java.util.List getPreferredPackages(int)>
SOURCE|<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: java.lang.String[] getPackagesForUid(int)>
SOURCE|<com.android.server.pm.PackageManagerService: java.util.List getAllPermissionGroups(int)>
SOURCE|<android.test.mock.MockPackageManager: java.util.List getPreferredPackages(int)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
SOURCE|<android.test.mock.MockPackageManager: java.lang.String[] getPackagesForUid(int)>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>
SOURCE|<com.android.providers.contacts.ContactDirectoryManager: java.util.Set getDirectoryProviderPackages(android.content.pm.PackageManager)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>
SOURCE|<android.test.mock.MockPackageManager: int[] getPackageGids(java.lang.String)>
SOURCE|<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)>
SOURCE|<com.android.server.pm.PackageManagerService: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
SOURCE|<com.android.server.pm.PackageManagerService: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>
SOURCE|<android.test.mock.MockPackageManager: java.util.List getAllPermissionGroups(int)>
SOURCE|<android.test.mock.MockPackageManager: java.util.List getInstalledApplications(int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getAllPermissionGroups(int)>
SOURCE|<android.test.mock.MockPackageManager: java.lang.String getInstallerPackageName(java.lang.String)>
SOURCE|<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getSystemSharedLibraryNames()>
SOURCE|<com.android.server.pm.PackageManagerService: int getUidForSharedUser(java.lang.String)>
SOURCE|<com.android.server.pm.PackageManagerService: java.util.List getPersistentApplications(int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
SOURCE|<com.android.server.pm.PackageManagerService$HandlerParams: android.os.UserHandle getUser()>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
SOURCE|<android.app.ApplicationPackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
SOURCE|<android.content.pm.PackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)>
SOURCE|<com.android.server.pm.PackageManagerService: java.lang.String getNameForUid(int)>
SOURCE|<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>
SOURCE|<android.test.mock.MockPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
SOURCE|<android.app.ApplicationPackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>
SOURCE|<com.android.server.pm.PackageManagerService: java.lang.String getTempContainerId()>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getPackagesForUid(int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
SOURCE|<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>
SOURCE|<com.android.server.pm.PackageManagerService$DumpState: com.android.server.pm.SharedUserSetting getSharedUser()>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>
SOURCE|<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>
SOURCE|<android.app.ApplicationPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>
SOURCE|<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: int getInstallLocation()>
SOURCE|<android.test.mock.MockPackageManager: java.lang.String getNameForUid(int)>
SOURCE|<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>
SOURCE|<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String,int)>

% WifiInfo
SOURCE|<android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>
SOURCE|<android.net.wifi.WifiInfo: int getLinkSpeed()>
SOURCE|<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>
SOURCE|<com.android.server.WifiService: android.net.wifi.WifiInfo getConnectionInfo()>
SOURCE|<android.net.wifi.WifiInfo: int getRssi()>
SOURCE|<android.net.wifi.WifiInfo: java.lang.String getSSID()>
SOURCE|<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
SOURCE|<android.net.wifi.WifiInfo: boolean getHiddenSSID()>
SOURCE|<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>
SOURCE|<android.net.wifi.WifiInfo: int getIpAddress()>
SOURCE|<android.net.wifi.WifiInfo: android.net.wifi.WifiSsid getWifiSsid()>
SOURCE|<android.net.wifi.WifiInfo: boolean getMeteredHint()>
SOURCE|<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()>
SOURCE|<android.net.wifi.WifiInfo: java.lang.String getBSSID()>
SOURCE|<android.net.wifi.WifiInfo: int getNetworkId()>

% AudioRecord
SOURCE|<android.media.AudioRecord: int getAudioFormat()>
SOURCE|<android.media.AudioRecord: int getMinBufferSize(int,int,int)>
SOURCE|<android.media.AudioRecord: int getAudioSessionId()>
SOURCE|<android.media.AudioRecord: int getState()>
SOURCE|<android.media.AudioRecord: int getChannelConfiguration()>
SOURCE|<android.media.AudioRecord: int getNotificationMarkerPosition()>
SOURCE|<android.media.AudioRecord: int getSampleRate()>
SOURCE|<android.media.AudioRecord: int getAudioSource()>
SOURCE|<android.media.AudioRecord: int getChannelCount()>
SOURCE|<android.media.AudioRecord: int getPositionNotificationPeriod()>
SOURCE|<android.media.AudioRecord: int getRecordingState()>

SOURCE|<android.media.AudioRecord: int read(short[],int,int)>
SOURCE|<android.media.AudioRecord: int read(byte[],int,int)>
SOURCE|<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>

% LocationManager
SOURCE|<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
SOURCE|<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)>
SOURCE|<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
SOURCE|<android.location.LocationManager: java.util.List getAllProviders()>
SOURCE|<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>
SOURCE|<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
SOURCE|<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
SOURCE|<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
SOURCE|<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
SOURCE|<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>
SOURCE|<android.location.LocationManager: android.location.Location getLastLocation()>
SOURCE|<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
SOURCE|<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
SOURCE|<android.location.ILocationManager$Stub: android.os.IBinder asBinder()>
SOURCE|<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
SOURCE|<com.android.server.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>
SOURCE|<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
SOURCE|<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<android.location.LocationManager: java.util.List getProviders(boolean)>
SOURCE|<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>
SOURCE|<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
SOURCE|<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
SOURCE|<com.android.server.LocationManagerService: java.util.List getAllProviders()>
SOURCE|<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)>
SOURCE|<com.android.camera.LocationManager: android.location.Location getCurrentLocation()>
SOURCE|<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()>
SOURCE|<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>


% TelephonyManager
SOURCE|<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>
SOURCE|<android.telephony.TelephonyManager: int getCdmaEriIconMode()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getSimOperator()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
SOURCE|<android.telephony.TelephonyManager: int getLteOnCdmaModeStatic()>
SOURCE|<android.telephony.TelephonyManager: int getNetworkClass(int)>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>
SOURCE|<android.telephony.TelephonyManager: int getPhoneType(int)>
SOURCE|<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
SOURCE|<android.telephony.TelephonyManager: int getDataState()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>
SOURCE|<com.android.mms.MmsApp: android.telephony.TelephonyManager getTelephonyManager()>
SOURCE|<android.telephony.TelephonyManager: int getCdmaEriIconIndex()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getMsisdn()>
SOURCE|<android.telephony.TelephonyManager: int getDataActivity()>
SOURCE|<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
SOURCE|<android.telephony.TelephonyManager: int getVoiceMessageCount()>
SOURCE|<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>
SOURCE|<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
SOURCE|<android.telephony.TelephonyManager: int getLteOnCdmaMode()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getIsimImpi()>
SOURCE|<android.telephony.TelephonyManager: int getNetworkType()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getIsimDomain()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)>
SOURCE|<android.telephony.TelephonyManager: int getPhoneType()>
SOURCE|<android.telephony.TelephonyManager: int getCurrentPhoneType()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()>
SOURCE|<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()>
SOURCE|<android.telephony.TelephonyManager: int getCallState()>
SOURCE|<android.telephony.TelephonyManager: int getSimState()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
SOURCE|<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.telephony.TelephonyManager getTelephonyManager()>
SOURCE|<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>

% bluetooth
SOURCE|<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: com.android.bluetooth.btservice.AdapterService getService()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hfp.HeadsetService: com.android.bluetooth.hfp.HeadsetService getHeadsetService()>
SOURCE|<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: int getProfileConnectionState(int)>
SOURCE|<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)>
SOURCE|<android.bluetooth.BluetoothDevice: java.lang.String getName()>
SOURCE|<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()>
SOURCE|<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()>
SOURCE|<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker getInstance()>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBondState()>
SOURCE|<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()>
SOURCE|<android.bluetooth.BluetoothAdapter: int getScanMode()>
SOURCE|<com.android.bluetooth.opp.BluetoothOppPreference: int getChannel(android.bluetooth.BluetoothDevice,int)>
SOURCE|<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.opp.BluetoothOppPreference: com.android.bluetooth.opp.BluetoothOppPreference getInstance(android.content.Context)>
SOURCE|<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>
SOURCE|<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getConnectedDevices()>
SOURCE|<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getBatteryCharge()>
SOURCE|<com.android.server.BluetoothManagerService: java.lang.String getAddress()>
SOURCE|<android.bluetooth.IBluetoothHealth$Stub: android.os.IBinder asBinder()>
SOURCE|<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()>
SOURCE|<android.bluetooth.BluetoothDevice: java.lang.String getAlias()>
SOURCE|<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()>
SOURCE|<android.bluetooth.BluetoothDevice: boolean getTrustState()>
SOURCE|<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.btservice.ProfileService: android.os.IBinder onBind(android.content.Intent)>
SOURCE|<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()>
SOURCE|<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>
SOURCE|<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: int getState()>
SOURCE|<com.android.bluetooth.opp.BluetoothOppBatch: com.android.bluetooth.opp.BluetoothOppShareInfo getPendingShare()>
SOURCE|<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothOobDataRecord()>
SOURCE|<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>
SOURCE|<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getConnectedDevices()>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: int getScanMode()>
SOURCE|<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
SOURCE|<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()>
SOURCE|<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
SOURCE|<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()>
SOURCE|<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: java.lang.String getName()>
SOURCE|<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])>
SOURCE|<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothTetheringDataTracker: int getDefaultGatewayAddr()>
SOURCE|<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseBtOob(java.nio.ByteBuffer)>
SOURCE|<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()>
SOURCE|<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<android.bluetooth.IBluetoothHeadsetPhone$Stub: android.os.IBinder asBinder()>
SOURCE|<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getSignal()>
SOURCE|<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getRemoteDeviceName()>
SOURCE|<android.bluetooth.IBluetoothManagerCallback$Stub: android.os.IBinder asBinder()>
SOURCE|<com.android.bluetooth.opp.BluetoothOppTransfer: int getBatchId()>
SOURCE|<com.android.nfc.handover.BluetoothOppHandover: java.lang.String getMimeTypeForUri(android.content.Context,android.net.Uri)>
SOURCE|<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: android.bluetooth.BluetoothDevice[] getBondedDevices()>
SOURCE|<com.android.bluetooth.opp.BluetoothOppUtility: java.lang.String getStatusDescription(android.content.Context,int,java.lang.String)>
SOURCE|<android.bluetooth.BluetoothAdapter: int getConnectionState()>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()>
SOURCE|<com.android.bluetooth.Utils: byte[] getBytesFromAddress(java.lang.String)>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: int getDiscoverableTimeout()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerInTransferLocked(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getNetworkOperator()>
SOURCE|<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()>
SOURCE|<com.android.server.BluetoothManagerService: java.lang.String getName()>
SOURCE|<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneNum()>
SOURCE|<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>
SOURCE|<com.android.phone.BluetoothPhoneService$3: java.lang.String getSubscriberNumber()>
SOURCE|<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()>
SOURCE|<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()>
SOURCE|<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.opp.BluetoothOppPreference: java.lang.String getName(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()>
SOURCE|<com.android.bluetooth.opp.BluetoothOppSendFileInfo: com.android.bluetooth.opp.BluetoothOppSendFileInfo generateFileInfo(android.content.Context,android.net.Uri,java.lang.String)>
SOURCE|<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)>
SOURCE|<com.android.bluetooth.hfp.HeadsetStateMachine: int getAudioState(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()>
SOURCE|<android.bluetooth.IBluetoothManager$Stub: android.os.IBinder asBinder()>
SOURCE|<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>
SOURCE|<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getConnectedDevices()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: int getState()>
SOURCE|<com.android.bluetooth.btservice.ProfileService: java.lang.String getName()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.Utils: byte[] getByteAddress(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>
SOURCE|<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothDevice: int getBondState()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)>
SOURCE|<com.android.bluetooth.btservice.AdapterService: com.android.bluetooth.btservice.AdapterService getAdapterService()>
SOURCE|<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>
SOURCE|<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<android.bluetooth.BluetoothPan: boolean isTetheringOn()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)>
SOURCE|<com.android.bluetooth.pan.PanService: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothClass: int getMajorDeviceClass()>
SOURCE|<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.opp.BluetoothOppManager: com.android.bluetooth.opp.BluetoothOppManager getInstance(android.content.Context)>
SOURCE|<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>
SOURCE|<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()>
SOURCE|<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()>
SOURCE|<android.bluetooth.IBluetoothPbap$Stub: android.os.IBinder asBinder()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneName()>
SOURCE|<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumHeldCall()>
SOURCE|<com.android.bluetooth.hfp.AtPhonebook: boolean getCheckingAccessPermission()>
SOURCE|<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()>
SOURCE|<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: short getRssi()>
SOURCE|<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities getLinkCapabilities()>
SOURCE|<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)>
SOURCE|<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<android.provider.Settings$Global: java.lang.String getBluetoothInputDevicePriorityKey(java.lang.String)>
SOURCE|<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>
SOURCE|<com.android.bluetooth.hid.HidService: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.phone.PhoneGlobals: android.bluetooth.IBluetoothHeadsetPhone getBluetoothPhoneService()>
SOURCE|<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()>
SOURCE|<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getCallState()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumActiveCall()>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()>
SOURCE|<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)>
SOURCE|<android.bluetooth.IBluetoothHealth$Stub$Proxy: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: int getScanMode()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])>
SOURCE|<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()>
SOURCE|<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getHealthDevicesMatchingConnectionStates(int[])>
SOURCE|<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getSubscriberNumber()>
SOURCE|<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>
SOURCE|<android.bluetooth.IBluetoothInputDevice$Stub: android.os.IBinder asBinder()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()>
SOURCE|<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<android.bluetooth.BluetoothSocket: int getPort()>
SOURCE|<android.bluetooth.IBluetoothPan$Stub: android.os.IBinder asBinder()>
SOURCE|<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()>
SOURCE|<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetooth getBluetoothService(android.bluetooth.IBluetoothManagerCallback)>
SOURCE|<com.android.bluetooth.hfp.HeadsetStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>
SOURCE|<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()>
SOURCE|<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
SOURCE|<com.android.bluetooth.a2dp.A2dpService: java.lang.String getName()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()>
SOURCE|<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>
SOURCE|<com.android.bluetooth.opp.BluetoothOppReceiveFileInfo: com.android.bluetooth.opp.BluetoothOppReceiveFileInfo generateFileInfo(android.content.Context,int)>
SOURCE|<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>
SOURCE|<android.bluetooth.BluetoothServerSocket: int getChannel()>
SOURCE|<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo getNetworkInfo()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>
SOURCE|<com.android.bluetooth.hdp.HealthService: java.lang.String getName()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)>
SOURCE|<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)>
SOURCE|<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()>
SOURCE|<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties getLinkProperties()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()>
SOURCE|<com.android.bluetooth.pan.PanService: java.lang.String getName()>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getAlias()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()>
SOURCE|<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: int getConnectionState()>
SOURCE|<android.bluetooth.IBluetoothHealth$Stub$Proxy: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
SOURCE|<android.bluetooth.BluetoothAdapter: java.lang.String getName()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)>
SOURCE|<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()>
SOURCE|<android.provider.Settings$Global: java.lang.String getBluetoothA2dpSinkPriorityKey(java.lang.String)>
SOURCE|<com.android.bluetooth.a2dp.A2dpStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getMicVolume()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getName()>
SOURCE|<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: byte[] getAddress()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String getErrorReason()>
SOURCE|<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.a2dp.A2dpService getA2dpService()>
SOURCE|<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()>
SOURCE|<com.android.bluetooth.Utils: java.lang.String getAddressStringFromByte(byte[])>
SOURCE|<com.android.bluetooth.opp.BluetoothOppRfcommTransport: java.lang.String getRemoteAddress()>
SOURCE|<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseNokia(java.nio.ByteBuffer)>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()>
SOURCE|<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<android.bluetooth.BluetoothClass: int getDeviceClass()>
SOURCE|<com.android.bluetooth.hfp.HeadsetService: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: int getBluetoothClass()>
SOURCE|<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapAuthenticator: byte[] onAuthenticationResponse(byte[])>
SOURCE|<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerOutTransferLocked(com.android.nfc.handover.HandoverManager$BluetoothHandoverData,android.net.Uri[])>
SOURCE|<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>
SOURCE|<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()>
SOURCE|<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()>
SOURCE|<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetoothManager getBluetoothManager()>
SOURCE|<android.bluetooth.IBluetoothPan$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()>
SOURCE|<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()>
SOURCE|<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)>
SOURCE|<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppSendFileInfo getSendFileInfo(android.net.Uri)>
SOURCE|<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getConnectedHealthDevices()>
SOURCE|<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()>
SOURCE|<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.BluetoothAdapter: int getState()>
SOURCE|<com.android.bluetooth.hfp.HeadsetService: java.lang.String getName()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String createOneEntry(boolean)>
SOURCE|<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)>
SOURCE|<com.android.internal.os.BatteryStatsImpl: long getBluetoothOnTime(long,int)>
SOURCE|<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseHandoverSelect(android.nfc.NdefMessage)>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBluetoothClass()>
SOURCE|<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices: android.bluetooth.BluetoothDevice getDevice(byte[])>
SOURCE|<com.android.bluetooth.hid.HidService: com.android.bluetooth.hid.HidService getHidService()>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: int getCount()>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getDeviceType()>
SOURCE|<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parse(android.nfc.NdefMessage)>
SOURCE|<com.android.bluetooth.hfp.HeadsetService: int getAudioState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()>
SOURCE|<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()>
SOURCE|<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothAlternateCarrierRecord(boolean)>
SOURCE|<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getRoam()>
SOURCE|<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()>
SOURCE|<com.android.bluetooth.hid.HidService: java.lang.String getName()>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getService()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()>
SOURCE|<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<android.bluetooth.BluetoothTetheringDataTracker: java.lang.String getTcpBufferSizesPropName()>
SOURCE|<com.android.nfc.handover.BluetoothHeadsetHandover: boolean getProfileProxys()>
SOURCE|<com.android.phone.BluetoothPhoneService$3: java.lang.String getNetworkOperator()>
SOURCE|<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.btservice.ProfileService: android.bluetooth.BluetoothDevice getDevice(byte[])>
SOURCE|<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: android.os.ParcelUuid[] getUuids()>
SOURCE|<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()>
SOURCE|<com.android.bluetooth.btservice.Config: java.lang.Class[] getSupportedProfiles()>
SOURCE|<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()>
SOURCE|<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()>
SOURCE|<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()>
SOURCE|<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties getDeviceProperties(android.bluetooth.BluetoothDevice)>
SOURCE|<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: android.os.ParcelUuid[] getUuids()>
SOURCE|<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.hfp.HeadsetPhoneState: int getSpeakerVolume()>
SOURCE|<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()>
SOURCE|<android.bluetooth.BluetoothPbap: int getState()>
SOURCE|<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])>
SOURCE|<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: byte[] getAddress()>
SOURCE|<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()>
SOURCE|<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()>
SOURCE|<android.provider.Settings$Global: java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String)>
SOURCE|<com.android.bluetooth.opp.BluetoothOppManager: int getBatchSize()>
SOURCE|<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
SOURCE|<com.android.bluetooth.btservice.AdapterProperties: int getState()>
SOURCE|<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
SOURCE|<android.bluetooth.IBluetoothPan$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>
SOURCE|<com.android.bluetooth.hdp.HealthService: java.util.List lookupHealthDevicesMatchingStates(int[])>
SOURCE|<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()>
SOURCE|<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>







% add Activity.getIntent() as source instead of the next methods to avoid duplicate results.


%bundle sources



